{%- set client = 'elasticsearch.client' in grains.roles -%}

{# We can only be a master or data node if we're not a client node #}
{%- set master = 'elasticsearch.master' in grains.roles and not client -%}
{%- set data = 'elasticsearch.data' in grains.roles and not client -%}

{%- set discover_master = salt['pillar.get']('elasticsearch:discover_master', False) -%}

{%- set shield = salt['pillar.get']('elasticsearch:encrypted', False) -%}

{# the lists of master & data nodes should NOT include client nodes #}
{%- set master_nodes = salt['mine.get']('G@stack_id:' ~ grains.stack_id ~ ' and G@roles:elasticsearch.master and not G@roles:elasticsearch.client', 'grains.items', 'compound').values() -%}
{%- set data_nodes = salt['mine.get']('G@stack_id:' ~ grains.stack_id ~ ' and G@roles:elasticsearch.data and not G@roles:elasticsearch.client', 'grains.items', 'compound').values() -%}

{# This is the number of nodes that hold data but don't have the master or client role #}
{%- set data_non_master = salt['mine.get']('G@stack_id:' ~ grains.stack_id ~ ' and G@roles:elasticsearch.data and not G@roles:elasticsearch.master and not G@roles:elasticsearch.client', 'grains.items', 'compound').values() -%}

{# If we're converting all the datanodes to also be masters, we need to add the ones that aren't already master nodes into the list of master nodes #}
{%- if discover_master -%}
  {%- set master_nodes = master_nodes + data_non_master -%}
{%- endif -%}

{%- set num_master_nodes = master_nodes | length -%}
{%- set num_data_nodes = data_nodes | length -%}

{# Grab from pillar data #}
{%- set num_shards = pillar.elasticsearch.shards -%}

{# Provide a default if there wasn't anything in the pillar data #}
{%- if not num_shards -%}
  {%- set num_shards = (num_data_nodes / 2) | int -%}
  {%- if num_shards < 5 -%}
      {%- set num_shards = 5 -%}
  {%- endif -%}
{%- endif -%}

{%- set num_replicas = pillar.elasticsearch.replicas -%}

# Naming
cluster.name: {{ grains.namespace }}
node.name: {{ grains.id }}
node.master: {{ (master or (data and discover_master)) | lower }}
node.data: {{ data | lower }}
node.client: {{ client | lower }}

# Network settings
network.host: 0.0.0.0
http.port: {{ pillar.elasticsearch.http_port }}
transport.tcp.port: {{ pillar.elasticsearch.tcp_port }}

# Discovery - just use the master nodes & disable multicast
discovery.zen.ping.multicast.enabled: false
discovery.zen.minimum_master_nodes: {{ ((num_master_nodes / 2) + 1) | int }}
discovery.zen.ping.unicast.hosts:
  {% for node in master_nodes %}
  - {{ node.fqdn }}:{{ pillar.elasticsearch.tcp_port }}
  {% endfor %}

# Recovery settings - this should help A LOT when restarting clusters.
gateway.recover_after_time: {{ pillar.elasticsearch.recover_time }}
gateway.recover_after_data_nodes: {{ (num_data_nodes * 0.75) | int }}

# Storage paths
path.data: /mnt/elasticsearch/data
path.work: /mnt/elasticsearch/work
path.logs: /mnt/elasticsearch/logs

# Disable the JVM from being swapped out
bootstrap.mlockall: true

{%- if pillar.elasticsearch.marvel.install %}
    {%- if pillar.elasticsearch.marvel.external_cluster %}
        {%- if pillar.elasticsearch.version.split('.')[0] | int < 2 %}
marvel.agent.exporter.es.hosts: ["{{ pillar.elasticsearch.marvel.external_cluster }}:{{ pillar.elasticsearch.http_port }}"]
         {%- else %}
marvel.agent.exporters:
  id1:
    type: http
    host: ["http://{{ pillar.elasticsearch.marvel.external_cluster }}:{{ pillar.elasticsearch.http_port }}"]
         {%- endif %}
    {%- endif %}
{%- endif %}

{%- if pillar.elasticsearch.marvel.is_external %}
marvel.agent.enabled: false
{%- endif %}

{% if shield %}
# Shield settings
shield.http.ssl: true
shield.transport.ssl: true
shield.ssl.keystore.path: /etc/elasticsearch/elasticsearch.keystore
shield.ssl.keystore.password: elasticsearch
shield.ssl.keystore.key_password: elasticsearch
{% endif %}

index:
  number_of_shards: {{ num_shards }}
  number_of_replicas: {{ num_replicas }}

threadpool:
  bulk:
    queue_size: 1000

{% if pillar.elasticsearch.aws.access_key %}
cloud:
  aws:
    region: {{ pillar.elasticsearch.aws.region }}
    access_key: {{ pillar.elasticsearch.aws.access_key }}
    secret_key: {{ pillar.elasticsearch.aws.secret_key }}
{% endif %}

{% for key, value in pillar.elasticsearch.extra_settings.items() %}
{{ key }}: {{ value | json }}
{% endfor %}
